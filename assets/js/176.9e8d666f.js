(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{693:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"评判算法的好坏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#评判算法的好坏"}},[s._v("#")]),s._v(" 评判算法的好坏")]),s._v(" "),t("p",[s._v("🙋如何评判一个算法的好坏呢？")]),s._v(" "),t("p",[s._v("回答：时间")]),s._v(" "),t("p",[s._v("10个数字")]),s._v(" "),t("p",[s._v("10万数字")]),s._v(" "),t("p",[s._v("实际运行的时间长多少？")]),s._v(" "),t("p",[t("strong",[s._v("不光要了解不同算法在运行时间上的区别，更重要的是根据数据输入量的大小，算法运行时间的变化趋势")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("如何求运行时间")])]),s._v(" "),t("p",[s._v("使用“步数”来描述运行时间。“1步”（就是指一个操作）就是计算的基本单位。")]),s._v(" "),t("p",[s._v("示例：对一堆乱序的数列进行排序")]),s._v(" "),t("ol",[t("li",[s._v("从整个数列中寻找最小值")]),s._v(" "),t("li",[s._v("将最小值和数列最左边的数字进行交换，回到步骤 1")])]),s._v(" "),t("p",[s._v("计算步骤：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("如果数列中有 n 个数字，那么步骤 1 中“寻找最小值”的步骤只需要确认 n 个数字即可。")])]),s._v(" "),t("li",[t("p",[s._v("将 “确认 1 个数字的大小” 作为操作的基本单位，需要时间 T"),t("sub",[s._v("c")]),s._v(" ，那么步骤 1 的运行时间就是 n * T"),t("sub",[s._v("c")]),s._v(" 。")])]),s._v(" "),t("li",[t("p",[s._v("“对两个数字进行交换” 也作为操作的基本单位，假设需要的时间为 T"),t("sub",[s._v("s")]),s._v("  。那么步骤 1 和步骤 2 总共重复 n 次，每经过 1 轮，需要查找的数字就减少 1 个，因此总的运行时间为：\n$$\n(n\\times Tc + Ts)+((n-1)\\times Tc + Ts)+((n-2)\\times Tc + Ts)+ .... + (2\\times Tc+Ts)+(1\\times Tc+Ts)\n$$")]),s._v(" "),t("p",[s._v("换算下来就是：\n$$\n\\frac{1}{2}Tc\\times n \\times (n+1) + Ts \\times n\n$$\n进一步换算：\n$$\n\\frac{1}{2} \\times Tc \\times n^2 + (\\frac{1}{2} \\times Tc + Ts) \\times n\n$$")])])]),s._v(" "),t("p",[t("strong",[s._v("运行时间表示法")])]),s._v(" "),t("p",[s._v("Tc 和 Ts 都是基本单位，与输入无关。会根据输入变化而变化的只有数列的长度 n。")]),s._v(" "),t("p",[s._v("n 越大，上面式子中的 n"),t("sup",[s._v("2")]),s._v(" 也就越大，其他部分就相对变小了。也就是说，对式子影响最大的是 n"),t("sup",[s._v("2")]),s._v("。")]),s._v(" "),t("p",[s._v("将结果表示称下面的形式：\n$$\n\\frac{1}{2} \\times Tc \\times n^2 + (\\frac{1}{2} \\times Tc + Ts) \\times n = O(n^2)\n$$\n"),t("code",[s._v("O(n^2)")]),s._v("所传达的信息：排序算法的运行时间与输入量 n 的平方成正比。")]),s._v(" "),t("p",[s._v("如果某个算法的运行时间为：\n$$\n3 \\times n \\times logn + 2 \\times Ty \\times n\n$$\n如何表达？")]),s._v(" "),t("p",[s._v("使用大O表示法表示出来为"),t("code",[s._v("O(nlogn)")])]),s._v(" "),t("p",[s._v("这样的表示方法被称之为大 O 表示法。这里的 O 是来自于英语的 Order（表示“阶”的意思）")]),s._v(" "),t("p",[s._v("它最早由数学家 Paul Bachmann 于 1894 年引入，在计算机科学中被 Donald Knuth 在 1970 年代普及。该表示法用来描述一个函数的"),t("strong",[s._v("增长速率")]),s._v("，其核心思想是描述一个算法在 "),t("strong",[s._v("最坏情况")]),s._v(" 下，输入数据量增加时，时间或空间需求的 "),t("strong",[s._v("增长趋势")]),s._v("，也就是算法的 "),t("strong",[s._v("上界")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("其他表示法")])]),s._v(" "),t("ol",[t("li",[s._v("Ω 表示法（Big Omega Notation）：用于描述一个算法的 "),t("strong",[s._v("下界")]),s._v("，算法在最好的情况下的一个增长趋势。")]),s._v(" "),t("li",[s._v("Θ 表示法（Big Theta Notation）：用于描述算法 "),t("strong",[s._v("精确增长的速率")]),s._v("，也就是算法在最坏和最好的情况下的增长趋势相同。")]),s._v(" "),t("li",[s._v("o 表示法（Little o Notation）：用来表示一个算法的增长速度"),t("strong",[s._v("严格小于")]),s._v("某个复杂度的增长，意味着算法的增长速度比给定函数增长得更慢。")]),s._v(" "),t("li",[s._v("ω 表示法（Little Omega Notation）：用来表示一个算法的增长速度"),t("strong",[s._v("严格大于")]),s._v("某个复杂度的增长，意味着算法的增长速度至少比给定函数快。")])]),s._v(" "),t("p",[s._v("在实际算法测量中，使用得最广泛的仍然是大O表示法。")]),s._v(" "),t("p",[t("strong",[s._v("复杂度")])]),s._v(" "),t("p",[s._v("无论是时间复杂度还是空间复杂度，评判的都是一种 "),t("strong",[s._v("增长趋势")]),s._v("。")]),s._v(" "),t("ol",[t("li",[s._v("时间复杂度：算法执行所需的时间随着输入规模 n 增长的一个变化趋势。")]),s._v(" "),t("li",[s._v("空间复杂度：算法执行所需的内存空间随着输入规模 n 增长的一个变化趋势。")])]),s._v(" "),t("p",[t("strong",[s._v("常见时间复杂度")])]),s._v(" "),t("p",[s._v("时间复杂度衡量的是一种变化趋势。随着 n 增大，整个时间花费的 "),t("strong",[s._v("变化趋势")]),s._v(" 是怎样的。")]),s._v(" "),t("ol",[t("li",[s._v("O(1)")]),s._v(" "),t("li",[s._v("O(logn)")]),s._v(" "),t("li",[s._v("O(n)")]),s._v(" "),t("li",[s._v("O(nlogn)")]),s._v(" "),t("li",[s._v("O(n²)")]),s._v(" "),t("li",[s._v("O(2"),t("sup",[s._v("n")]),s._v(")")]),s._v(" "),t("li",[s._v("O(n!)")])]),s._v(" "),t("p",[s._v("上面的这几种复杂度，从上往下，随着 n 的增大，时间花费都不相同。越上面的，时间变化趋势越平缓性能越优；越往下面，时间增长趋势越陡峭，性能就越低。")]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-03-28-035621.png",alt:"image-20220328115620995"}}),s._v(" "),t("p",[t("strong",[t("code",[s._v("O(1)")])])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[t("code",[s._v("O(1)")]),s._v(" 的时间复杂度不会随着 n 的变化，运行时间有什么增加。")]),s._v(" "),t("p",[t("code",[s._v("O(logn)")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("因为每次迭代都是将 i 翻两倍，循环的次数是对数级别的。因此时间复杂度为 "),t("code",[s._v("O(logn)")])]),s._v(" "),t("p",[s._v("假设 n 是 8，就会循环 3 次。")]),s._v(" "),t("p",[t("code",[s._v("O(n)")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("上面的代码，n 为多少，就会循环多少次，因此时间复杂度为 "),t("code",[s._v("O(n)")]),s._v(" 级别。")]),s._v(" "),t("p",[s._v("假设 n 是 8，就会循环 8 次。")]),s._v(" "),t("p",[t("code",[s._v("O(nlogn)")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[t("code",[s._v("O(n²)")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("依此类推，假设有三层循环，那么时间复杂度就是 "),t("code",[s._v("O(n^3)")])]),s._v(" "),t("p",[t("code",[s._v("O(2^n)")])]),s._v(" "),t("p",[s._v("比如递归算法。每多展开一层，运算的个数也就会翻 2 倍，以 2 的幂次方的规律增长。")]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-03-28-052721.png",alt:"image-20220328132720591"}}),s._v(" "),t("p",[t("strong",[s._v("在大O表示法中，只有高阶的项才决定了算法最终的时间复杂度")]),s._v("。")]),s._v(" "),t("p",[s._v("O(n) + O(logn) = O(n)")]),s._v(" "),t("p",[s._v("O(n²) + O(n) = O(n²)")]),s._v(" "),t("p",[t("strong",[s._v("常见的空间复杂度")])]),s._v(" "),t("p",[s._v("衡量的是随着 n 的增长，所使用的内存空间的一个增长趋势。")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("O(1)")])])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ni"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nj"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nn "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[t("code",[s._v("O(n)")])])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("这里 n 有多大，就决定为数组开辟的内存空间有多大。")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("code",[s._v("O(n^2)")])])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("🤔了解时间和空间复杂度的好处？")]),s._v(" "),t("p",[s._v("了解了时间和空间复杂度之后，以后在写代码的时候，就会自然而然的去想一下自己写的这段代码的性能如何。")]),s._v(" "),t("p",[s._v("需求：计算从 1 加到 n 的和")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("上面这种解法，时间复杂度为 O(n)，但是我们现在换一种算法，采用数学里面等差数列的求和公式：")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])])]),t("p",[s._v("上面的解法，时间复杂度就从 O(n) 下降到了 O(1)")])])}),[],!1,null,null,null);t.default=e.exports}}]);