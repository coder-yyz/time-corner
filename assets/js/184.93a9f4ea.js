(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{701:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"常见算法思维"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见算法思维"}},[t._v("#")]),t._v(" 常见算法思维")]),t._v(" "),s("p",[t._v("常见算法思维：")]),t._v(" "),s("ol",[s("li",[t._v("分治法")]),t._v(" "),s("li",[t._v("迭代法")]),t._v(" "),s("li",[t._v("枚举法")]),t._v(" "),s("li",[t._v("回溯法")]),t._v(" "),s("li",[t._v("贪心法")]),t._v(" "),s("li",[t._v("动态规划")])]),t._v(" "),s("h2",{attrs:{id:"_1-分治法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-分治法"}},[t._v("#")]),t._v(" 1. 分治法")]),t._v(" "),s("p",[t._v("英语里面叫做 divide and Conquer")]),t._v(" "),s("p",[s("strong",[t._v("核心思想")])]),t._v(" "),s("p",[t._v("将一个复杂的问题分解成多个简单的子问题，递归地求解这些子问题，如果子问题还是比较复杂，那么就继续进行拆分。最后再将所有子问题的解合并成最终解。")]),t._v(" "),s("p",[s("strong",[t._v("核心步骤")])]),t._v(" "),s("ol",[s("li",[t._v("分解：将原来的问题分解为多个小问题")]),t._v(" "),s("li",[t._v("求解：递归的解决所有的子问题")]),t._v(" "),s("li",[t._v("合并：将所有子问题的解合并成原来问题的解。")])]),t._v(" "),s("p",[s("strong",[t._v("举例：归并排序")])]),t._v(" "),s("p",[t._v("归并排序就是典型的使用的是分治的思想：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-02-11-083546.png",alt:"image-20250211163545350"}}),t._v(" "),s("p",[t._v("整个归并排序会经历：")]),t._v(" "),s("ol",[s("li",[t._v("分解：将待排序的数组不断的分成两个部分，直到不能再分解")]),t._v(" "),s("li",[t._v("求解：递归的将两个部分的数组进行归并排序")]),t._v(" "),s("li",[t._v("合并：将两个排序后的数组将其合并为一个排序好的数组")])]),t._v(" "),s("p",[s("strong",[t._v("分治法的优缺点")])]),t._v(" "),s("ul",[s("li",[t._v("优点：简化问题。通过分解一个大问题，将其全部转换为较为简单的子问题，从而易于求解。")]),t._v(" "),s("li",[t._v("缺点：往往需要一些额外的空间。空间复杂度一般在 O(n) 左右。分治法往往需要额外的存储空间来存储分解后的子问题。")])]),t._v(" "),s("h2",{attrs:{id:"_2-迭代法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-迭代法"}},[t._v("#")]),t._v(" 2. 迭代法")]),t._v(" "),s("p",[t._v("英语叫做 Iteration")]),t._v(" "),s("p",[s("strong",[t._v("核心思想")])]),t._v(" "),s("p",[t._v("重复执行一系列步骤，直到满足某个条件或达到预定目标。每次迭代都在一定程度上修改问题的状态，最终通过不断的更新和计算得到问题的解。")]),t._v(" "),s("p",[s("strong",[t._v("核心步骤")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("初始化：先设置一个初始值，准备进入迭代。")])]),t._v(" "),s("li",[s("p",[t._v("条件判断：在每次迭代开始之前，需要检查当前状态是否满足结束条件，如果满足结束条件，那么就停止迭代。")])]),t._v(" "),s("li",[s("p",[t._v("更新：需要不停的去更新状态，从而进入下一次迭代。")])]),t._v(" "),s("li",[s("p",[t._v("重复：一直执行迭代")])])]),t._v(" "),s("p",[t._v("其实，循环就是典型的迭代的思想。")]),t._v(" "),s("p",[s("strong",[t._v("举例：计算递增序列的和")])]),t._v(" "),s("p",[t._v("1+2+3+4+ ....+ 99+100")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面的解法，背后采用的就是迭代的思想。")]),t._v(" "),s("h2",{attrs:{id:"_3-枚举法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-枚举法"}},[t._v("#")]),t._v(" 3. 枚举法")]),t._v(" "),s("p",[t._v("英语叫做 Enumeration")]),t._v(" "),s("p",[s("strong",[t._v("核心思想")])]),t._v(" "),s("p",[t._v("列出"),s("strong",[t._v("所有可能的选项")]),t._v("，并逐一检查每一个选项，判断是否符合问题的约束条件。")]),t._v(" "),s("p",[s("strong",[t._v("核心步骤")])]),t._v(" "),s("ol",[s("li",[t._v("穷举所有可能的解")]),t._v(" "),s("li",[t._v("检查每个解：看每一个解是否符合要求")]),t._v(" "),s("li",[t._v("选择合适的解")])]),t._v(" "),s("p",[s("strong",[t._v("举例：力扣第 1 题")])]),t._v(" "),s("p",[t._v("给定一个整数数组 "),s("code",[t._v("nums")]),t._v(" 和一个整数目标值 "),s("code",[t._v("target")]),t._v("，请你在该数组中找出 "),s("strong",[t._v("和为目标值 target")]),t._v("  的那 "),s("strong",[t._v("两个")]),t._v(" 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。你可以按任意顺序返回答案。")]),t._v(" "),s("p",[t._v("示例 1")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("输入：nums "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n输出："),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("示例 2")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("输入：nums "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n输出："),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("示例 3")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("输入：nums "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n输出："),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("这道题大家能够想到的就是枚举的方式，从第一个数开始，和后面的数进行组合，看是否符合要求。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("twoSum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历数组从第一个到倒数第二个")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历数组从第二个到最后一个")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nums "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("twoSum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nums2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" target2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("twoSum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("虽然上面的算法也用到了迭代的操作，但是我们迭代是为了枚举出所有的和，迭代仅仅是实现手段，算法背后的核心思想仍然是枚举。")]),t._v(" "),s("h2",{attrs:{id:"回溯算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[t._v("#")]),t._v(" 回溯算法")]),t._v(" "),s("p",[t._v("什么是回溯")]),t._v(" "),s("p",[t._v("使用 DFS 查找二叉树所有的路径：")]),t._v(" "),s("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-17-051939.png",alt:"image-20250317131939163"}}),t._v(" "),s("p",[t._v("回溯本质上是一种 "),s("strong",[t._v("暴力穷举算法")]),t._v("，把所有的可能都列举出来，所以没有剪枝情况下的回溯是比较低效的。正因为这样，"),s("strong",[t._v("一般回溯会进行剪枝操作")]),t._v("。所谓剪枝，指的就是当搜索到某个分支不可能得到可行解（或更优解）时，就 "),s("strong",[t._v("提前结束")]),t._v(" 该分支，避免进行无意义的搜索。")]),t._v(" "),s("p",[s("strong",[t._v("具体示例")])]),t._v(" "),s("p",[t._v("🙋[1, 2, 3] 这 3 个数有多少种组合呢？")]),t._v(" "),s("p",[t._v("就是将所有的结果都穷举出来：")]),t._v(" "),s("ul",[s("li",[t._v("第一位选 1，第二位从 [2, 3] 里面去选，第二位选择的是什么又影响第三位")]),t._v(" "),s("li",[t._v("第一位选 2，第二位从 [1, 3] 里面去选，第二位选择的是什么又影响第三位")]),t._v(" "),s("li",[t._v("第一位选 3，第二位从 [1, 2] 里面去选，第二位选择的是什么又影响第三位")])]),t._v(" "),s("p",[t._v("这里可以将选择的过程抽象为一颗树：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-17-053402.png",alt:"image-20250317133402254"}})]),t._v(" "),s("p",[s("strong",[t._v("算法模板")])]),t._v(" "),s("p",[t._v("整个回溯算法，可以看作是一个树的遍历过程，因此整个回溯算法有如下的算法模板：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("参数")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("终止条件"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        存放结果"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("选择：本层集合中元素（树中节点孩子的数量就是集合的大小）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        处理节点"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径，选择列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归")]),t._v("\n        回溯，撤销处理结果\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-17-053838.png",alt:"image-20250317133838706"}}),t._v(" "),s("p",[s("strong",[t._v("回溯能解决的问题")])]),t._v(" "),s("ol",[s("li",[t._v("组合问题：N个数按照一定的规则找出 k 个数的集合")]),t._v(" "),s("li",[t._v("切割问题：一个字符串按照一定的规则进行切割，看有多少种切割方式")]),t._v(" "),s("li",[t._v("子集问题：一个 N 个数的集合里面有多少符合条件的子集")]),t._v(" "),s("li",[t._v("排列问题：N 个数按照一定规则来进行排列，看有多少种排列的方式")]),t._v(" "),s("li",[t._v("棋盘问题")])]),t._v(" "),s("h2",{attrs:{id:"贪心算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),s("p",[t._v("贪心的本质是选择"),s("strong",[t._v("每一阶段的局部最优")]),t._v("，从而达到"),s("strong",[t._v("全局最优")]),t._v("。")]),t._v(" "),s("p",[t._v("🙋提问： 例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？")]),t._v(" "),s("p",[t._v("回答：每一次都拿走当前钞票面值最大的那一张。最终就是拿走的是最大数额的钱。每一次拿走的最大就是局部最优，最终拿走的面值的总额就是全局最优。")]),t._v(" "),s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 "),s("code",[t._v("i")]),t._v("，都有一个胃口值 "),s("code",[t._v("g[i]")]),t._v("，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 "),s("code",[t._v("j")]),t._v("，都有一个尺寸 "),s("code",[t._v("s[j]")]),t._v(" 。如果 "),s("code",[t._v("s[j] >= g[i]")]),t._v("，我们可以将这个饼干 "),s("code",[t._v("j")]),t._v(" 分配给孩子 "),s("code",[t._v("i")]),t._v(" ，这个孩子会得到满足。你的目标是满足尽可能多的孩子，并输出这个最大数值。")]),t._v(" "),s("p",[t._v("示例 1")]),t._v(" "),s("blockquote",[s("p",[t._v("输入: g = [1,2,3], s = [1,1]\n输出: 1\n解释:\n你有三个孩子和两块小饼干，3 个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是 1，你只能让胃口值是 1 的孩子满足。\n所以你应该输出 1。")])]),t._v(" "),s("p",[t._v("示例 2")]),t._v(" "),s("blockquote",[s("p",[t._v("输入: g = [1,2], s = [1,2,3]\n输出: 2\n解释:\n你有两个孩子和三块小饼干，2 个孩子的胃口值分别是 1,2。\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\n所以你应该输出 2。")])]),t._v(" "),s("p",[s("strong",[t._v("代码实现")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * g - 小孩数组，数字代表胃口值 [1,2,3] 3 个孩子的胃口值分别是：1,2,3\n * s - 饼干数组，数字代表尺寸 [1,2,3] 3块饼干，尺寸分别是 1,2,3\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findContentChildren")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 先对小孩的胃口值还有饼干尺寸进行排序")]),t._v("\n  g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对胃口值排序")]),t._v("\n  s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对饼干尺寸进行排序")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录满足孩子的数量")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 孩子数组的指针")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 饼干数组的指针")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同时遍历孩子和饼干的数组")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个孩子")]),t._v("\n      j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前的饼干也被用了，移动到下一块饼干")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为饼干是排好序了的，直接尝试下一块饼干")]),t._v("\n      j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("【有一堆钞票，拿走十张，要达到最大金额】")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaxAmount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("bills")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  bills"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从大到小排序")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" selectedBills "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bills"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" totalAmount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" selectedBills"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" bill"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("selectedBills"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalAmount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一堆钞票")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bills "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaxAmount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bills"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"动态规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),s("p",[t._v("动态规划，英语叫做 Dynamic Programming，简称 DP，这是一种"),s("strong",[t._v("解决复杂问题的方法")]),t._v("，其最最最核心的思想，就是 "),s("strong",[t._v("将问题分解成子问题")]),t._v("，只要子问题解决了，那么这个复杂问题也就解决了。")]),t._v(" "),s("blockquote",[s("p",[t._v("和分治法的区别：")]),t._v(" "),s("p",[t._v("核心区别在于"),s("strong",[t._v("子问题是否存在重叠性")]),t._v("，相同的子问题可能会被多次计算，动态规划通过"),s("strong",[t._v("存储子问题的结果")]),t._v("（记忆化搜索或自底向上计算）来"),s("strong",[t._v("避免重复计算")]),t._v("。相比之下，分治法通常将问题拆分成"),s("strong",[t._v("相互独立的子问题")]),t._v("，然后合并子问题的结果。")])]),t._v(" "),s("h3",{attrs:{id:"dp-核心特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dp-核心特点"}},[t._v("#")]),t._v(" DP 核心特点")]),t._v(" "),s("ol",[s("li",[t._v("最优子结构（Optimal Substructure）")]),t._v(" "),s("li",[t._v("重叠子问题（Overlapping Subproblems）")]),t._v(" "),s("li",[t._v("存储子问题的解（Memoization / Tabulation）")])]),t._v(" "),s("h4",{attrs:{id:"_1-最优子结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-最优子结构"}},[t._v("#")]),t._v(" 1. 最优子结构")]),t._v(" "),s("p",[t._v("最优子结构指的是："),s("strong",[t._v("某个问题的最优解可以通过其子问题的最优解来构造")]),t._v("。换句话说，假如你想求问题 P 的最佳答案，那么可以先把 P 拆分为若干子问题 P"),s("sub",[t._v("1")]),t._v("、P"),s("sub",[t._v("2")]),t._v("、P"),s("sub",[t._v("3")]),t._v("、P"),s("sub",[t._v("4")]),t._v(" ..... ，并把它们分别求出这些子问题的最优解，然后再根据子问题的最优解组合出 P 的最优解。")]),t._v(" "),s("p",[t._v("实际上，拥有最优子结构是许多算法设计策略（包括分治法、贪心算法、动态规划）的一个重要前提。对于 DP 来说，没有最优子结构就无法通过拆分子问题来推导原问题的解。")]),t._v(" "),s("p",[t._v("一个实际的例子：斐波那契数列")]),t._v(" "),s("p",[t._v("计算斐波那契数列的第 n 项，这里就需要拆解成 n-1 项和 n-2 项，然后得到这两个子问题的最优解，最终能够组合得到第 n 项的最优解。")]),t._v(" "),s("h4",{attrs:{id:"_2-重叠子问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-重叠子问题"}},[t._v("#")]),t._v(" 2. 重叠子问题")]),t._v(" "),s("p",[t._v("重叠子问题指的是：在将原问题分解为若干子问题后，这些子问题在问题的求解过程中会重复出现，从而导致你重复的计算多次。")]),t._v(" "),s("p",[t._v("分治法虽然也会把问题拆分成子问题，但在很多分治问题里，这些子问题要么不重叠，要么仅仅少量重叠；而动态规划则通常在大规模、带有递推性质的场景中，"),s("strong",[t._v("大量重复")]),t._v("的子问题"),s("strong",[t._v("被反复计算")]),t._v("。如果不加以"),s("strong",[t._v("记录")]),t._v("，就会做许多 "),s("strong",[t._v("重复计算")]),t._v("，从而影响效率。")]),t._v(" "),s("p",[t._v("一个例子：斐波那契数列")]),t._v(" "),s("ul",[s("li",[t._v("F(5) = F(4) + F(3)")]),t._v(" "),s("li",[t._v("F(4) = F(3) + F(2)\n"),s("ul",[s("li",[t._v("F(3) = F(2) + F(1)")])])]),t._v(" "),s("li",[t._v("F(3) = F(2) + F(1)")])]),t._v(" "),s("h4",{attrs:{id:"_3-存储子问题的解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-存储子问题的解"}},[t._v("#")]),t._v(" 3. 存储子问题的解")]),t._v(" "),s("p",[t._v("对于不断重叠出现的子问题，如果我们能把它们的解存储起来，下次遇到相同的子问题就直接取结果，而不是重新计算，便能大大降低算法的时间复杂度。")]),t._v(" "),s("p",[t._v("在实现层面，通常有两种形式：")]),t._v(" "),s("ol",[s("li",[t._v("记忆化搜索（Memoization，Top-Down）自上而下")]),t._v(" "),s("li",[t._v("表格法（Tabulation，Bottom-Up）自下而上")])]),t._v(" "),s("p",[t._v("存储子问题解这一特性让动态规划和纯粹的分治算法区分开来，也显著地提高了运算效率。纯分治往往不刻意缓存子问题结果，而是“算完就走”，需要时再重新计算；而 DP 会把结果记下来，这就是动态规划“动态”这个概念体现的地方：我们可以说状态是“动态地”沿着子问题规模的增加而得到维护和更新。")]),t._v(" "),s("h3",{attrs:{id:"状态转移方程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态转移方程"}},[t._v("#")]),t._v(" 状态转移方程")]),t._v(" "),s("p",[s("strong",[t._v("状态转移方程")]),t._v(" 就是描述 "),s("strong",[t._v("从一个状态如何过渡到另一个状态")]),t._v(" 的规则或"),s("strong",[t._v("公式")]),t._v("。它本质上是一种 "),s("strong",[t._v("递推/递归关系")]),t._v("，用来指导我们如何从小规模子问题的解，一步步累积得到大规模问题的解。")]),t._v(" "),s("p",[t._v("换句话说：一个问题的解可以由它的子问题解来合成。“状态转移方程”就把这"),s("strong",[t._v("种合成过程")]),t._v("用正式的数学或伪代码表达出来。")]),t._v(" "),s("p",[t._v("例如斐波那契数列可以写成：\n$$\nF(n)=F(n−1)+F(n−2)，F(0)=0,F(1)=1\n$$\n而在背包问题中的，若令 "),s("code",[t._v("dp[i][c]")]),t._v(" 表示在只考虑前 "),s("code",[t._v("i")]),t._v(" 个物品、容量为 "),s("code",[t._v("c")]),t._v(" 的情况下能达到的最大价值，那么状态转移方程就可以写成：\n$$\ndp[i][c] = \\max\\Bigl( dp[i-1][c],, dp[i-1][c - \\text{weight}_i] + \\text{value}_i \\Bigr)\n$$\n一般来讲，DP 的题目中状态转移方程列举出来了，题目基本上就完成一半了。")]),t._v(" "),s("p",[t._v("那么如何来列出这个重要的状态转移方程呢？"),s("strong",[t._v("多练题")])]),t._v(" "),s("h3",{attrs:{id:"具体实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体实践"}},[t._v("#")]),t._v(" 具体实践")]),t._v(" "),s("h4",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),s("p",[s("strong",[t._v("斐波那契数列")]),t._v("（Fibonacci Sequence）指的是这样一个数列：")]),t._v(" "),s("ul",[s("li",[t._v("F(0)=0")]),t._v(" "),s("li",[t._v("F(1)=1")]),t._v(" "),s("li",[t._v("从第二项开始，每一项都等于前两项之和，即：")])]),t._v(" "),s("p",[t._v("$$\nF(n)=F(n−1)+F(n−2)，n≥2\n$$")]),t._v(" "),s("p",[t._v("**要求：**给定一个整数 "),s("code",[t._v("n")]),t._v("，请你计算 F(n) 并返回结果。")]),t._v(" "),s("p",[s("strong",[t._v("举例：")])]),t._v(" "),s("ul",[s("li",[t._v("当 n=0 时，F(0)=0")]),t._v(" "),s("li",[t._v("当 n=1 时，F(1)=1")]),t._v(" "),s("li",[t._v("当 n=5 时，F(5)=5（序列为 0, 1, 1, 2, 3, 5, 8, 13, 21...）")])]),t._v(" "),s("h4",{attrs:{id:"解题思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[t._v("#")]),t._v(" 解题思路")]),t._v(" "),s("p",[t._v("最基础、最直观的思路是"),s("strong",[t._v("递归")]),t._v("："),s("code",[t._v("F(n) = F(n-1) + F(n-2)")]),t._v("。但如果我们直接用“自顶向下”的纯递归算法，会"),s("strong",[t._v("有大量重复计算")]),t._v("。例如，计算 "),s("code",[t._v("F(5)")]),t._v(" 时，需要先算 "),s("code",[t._v("F(4) + F(3)")]),t._v("；计算 "),s("code",[t._v("F(4)")]),t._v(" 又要算 "),s("code",[t._v("F(3) + F(2)")]),t._v("……很多重复。“动态规划”能通过 "),s("strong",[t._v("存储子问题解")]),t._v(" 来避免重复计算，将原本指数级复杂度降低到线性或更优。")]),t._v(" "),s("p",[s("strong",[t._v("最优子结构")])]),t._v(" "),s("p",[t._v("最优子结构指的是："),s("strong",[t._v("原问题的最优解可以由其子问题的最优解组合而成")]),t._v("。")]),t._v(" "),s("p",[t._v("对于斐波那契数列，"),s("code",[t._v("F(n) = F(n-1) + F(n-2)")]),t._v(" 正说明了：要想得到 "),s("code",[t._v("F(n)")]),t._v("，只需要先把 "),s("code",[t._v("F(n-1)")]),t._v(" 和 "),s("code",[t._v("F(n-2)")]),t._v(" 计算好（它们各自都是各自子问题的“最优解”——对于数列而言，就是唯一且正确的值），然后将这两个结果相加即可。")]),t._v(" "),s("p",[s("strong",[t._v("重叠子问题")])]),t._v(" "),s("p",[t._v("斐波那契数列的子问题有大量重叠：")]),t._v(" "),s("ul",[s("li",[t._v("比如纯递归计算 "),s("code",[t._v("F(5)")]),t._v(" 时：\n"),s("ul",[s("li",[s("code",[t._v("F(5)")]),t._v(" 会调用 "),s("code",[t._v("F(4)")]),t._v(" 和 "),s("code",[t._v("F(3)")])]),t._v(" "),s("li",[s("code",[t._v("F(4)")]),t._v(" 会调用 "),s("code",[t._v("F(3)")]),t._v(" 和 "),s("code",[t._v("F(2)")])]),t._v(" "),s("li",[t._v("可以看到，"),s("code",[t._v("F(3)")]),t._v(" 被反复调用了多次，这就是"),s("strong",[t._v("子问题重叠")]),t._v("。")])])])]),t._v(" "),s("p",[s("strong",[t._v("存储子问题的解")])]),t._v(" "),s("p",[t._v("在动态规划中，通过"),s("strong",[t._v("存储")]),t._v("已经算好的子问题 "),s("code",[t._v("F(k)")]),t._v(" 的值，下次再需要时就直接取用，不必再次计算。")]),t._v(" "),s("p",[t._v("实现方式上，可以"),s("strong",[t._v("记忆化搜索（Memoization）")]),t._v(" 或 "),s("strong",[t._v("表格法（Tabulation）")]),t._v("。对斐波那契来说，表格法相对来讲会更简单，开一个数组 "),s("code",[t._v("dp")]),t._v("，其中 "),s("code",[t._v("dp[i]")]),t._v(" 用来存储 "),s("code",[t._v("F(i)")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("状态转移方程")])]),t._v(" "),s("p",[t._v("斐波那契数列之所以适合作为动态规划的入门题，就是因为题目中已经将状态转移方程告诉你了。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("状态定义：用 "),s("code",[t._v("dp[i]")]),t._v(" 来表示 "),s("code",[t._v("F(i)")]),t._v(" 的值，即斐波那契数列第 "),s("code",[t._v("i")]),t._v(" 项。")])]),t._v(" "),s("li",[s("p",[t._v("状态转移方程：\n$$\ndp[i]=dp[i−1]+dp[i−2]\n$$")])]),t._v(" "),s("li",[s("p",[t._v("初始条件：\n$$\ndp[0]=0,dp[1]=1\n$$")])]),t._v(" "),s("li",[s("p",[t._v("计算顺序：当我们用“表格法”解斐波那契时，可以从 "),s("code",[t._v("i = 2")]),t._v(" 往后依次计算，直至 "),s("code",[t._v("i = n")]),t._v("，这样前面的 "),s("code",[t._v("dp[0], dp[1]... dp[i-1]")]),t._v("、"),s("code",[t._v("dp[i-2]")]),t._v(" 都已经就绪，可用于计算下一步。")])])]),t._v(" "),s("p",[s("strong",[t._v("代码实现")])]),t._v(" "),s("p",[t._v("使用表格法（自下而上）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * n - 斐波那契的第 n 项\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fibonacci")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接下来我们需要一个 dp 数组来记录状态")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接下来做初始化")]),t._v("\n  dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 填充表格")]),t._v("\n    dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);