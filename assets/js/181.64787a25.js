(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{698:function(t,n,i){"use strict";i.r(n);var v=i(2),_=Object(v.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"图结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图结构"}},[t._v("#")]),t._v(" 图结构")]),t._v(" "),n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),n("p",[t._v("图是网络结构的抽象模型，由一组 "),n("strong",[t._v("边")]),t._v(" 和 "),n("strong",[t._v("顶点")]),t._v(" 组成。下图就是一个典型的图结构：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-03-121821.png",alt:"image-20250303201821109"}}),t._v(" "),n("p",[n("strong",[t._v("相关术语")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("顶点：图里面一个一个数据元素被称之为 "),n("strong",[t._v("顶点")]),t._v("。之前在线性表中称之为元素，树里面称之为节点。")]),t._v(" "),n("p",[t._v("另外，线性表可以没有元素（空表），树里面可以没有节点（空树），但是在图结构中不能够没有顶点。")])]),t._v(" "),n("li",[n("p",[t._v("相邻顶点：由一条边连接在一起的两个顶点，称之为相邻顶点。")])]),t._v(" "),n("li",[n("p",[t._v("度：一个顶点的相邻顶点的数量。")])]),t._v(" "),n("li",[n("p",[t._v("路径：指的是一连串顶点序列。其中有一个概念称之为 "),n("strong",[t._v("简单路径")]),t._v("，指的就是 "),n("strong",[t._v("不包含")]),t._v(" 重复顶点的路径。")])]),t._v(" "),n("li",[n("p",[t._v("环：从某一个顶点出发，最后回到该顶点，形成了一个闭环。环也会算作是一个简单路径。")])])]),t._v(" "),n("p",[n("strong",[t._v("无向图和有向图")])]),t._v(" "),n("ol",[n("li",[t._v("无向图：顾名思义就是 "),n("strong",[t._v("顶点之间是没有方向的")])])]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-03-120233.png",alt:"image-20250303200232935"}}),t._v(" "),n("p",[t._v("由于是无方向的，因此连接 A 和 D 的边，可以表示为 "),n("code",[t._v("(A, D)")]),t._v("，也可以写成"),n("code",[t._v("(D, A)")]),t._v("。对于无向图来讲，"),n("code",[t._v("G = (V,{E})")]),t._v("，其中顶点集合 "),n("code",[t._v("V = {A,B,C,D}")]),t._v("，边集合 "),n("code",[t._v("E = {(A,B), (B,C), (C,D), (D,A), (A,C)}")])]),t._v(" "),n("p",[t._v("在无向图中，如果"),n("strong",[t._v("每一个顶点都和其他所有顶点相连")]),t._v("，则称该无向图为 "),n("strong",[t._v("无向完全图")]),t._v("。如下图所示：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-03-131346.png",alt:"image-20250303211346799"}}),t._v(" "),n("p",[t._v("一个含有 n 个顶点的无向完全图拥有\n$$\n\\frac{n*(n-1)}{2}\n$$")]),t._v(" "),n("p",[t._v("条边。例如上面的无向完全图有 4 个顶点，根据公式计算出拥有 6 条边。")]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("有向图：顶点之间 "),n("strong",[t._v("有明确的方向")])])]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-03-121207.png",alt:"image-20250303201206757"}}),t._v(" "),n("p",[t._v("有向图是有方向的，使用 "),n("strong",[t._v("尖括号")]),t._v(" 来表示，尖括号中的第一个节点表示 tail，第二个节点表示 head。例如上图为 "),n("code",[t._v("G = (V,{E})")]),t._v("，其中顶点集合 "),n("code",[t._v("V = {A,B,C,D}")]),t._v("，边集合 "),n("code",[t._v("E = {<A,D>, <B,A>, <C,A>, <B,C>}")]),t._v("。")]),t._v(" "),n("p",[t._v("在有向图中，如果 "),n("strong",[t._v("任意两个顶点之间都存在方向相反的指向")]),t._v("，称之为 "),n("strong",[t._v("有向完全图")]),t._v("。例如下图就是一个有向完全图：")]),t._v(" "),n("img",{staticStyle:{zoom:"35%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-045950.png",alt:"image-20250312125950523"}}),t._v(" "),n("p",[n("strong",[t._v("加权图")])]),t._v(" "),n("p",[t._v("图还可以是加权的。如下图所示，加权图的 "),n("strong",[t._v("边被赋予了权值")]),t._v("。")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-03-125916.png",alt:"image-20250303205916275"}}),t._v(" "),n("p",[n("strong",[t._v("子图")])]),t._v(" "),n("p",[t._v("假设有两个图，一个图是 G = (V, {E})，另一个图是 G' = (V', {E'})，如果\n$$\n\\begin{aligned}\nV' &\\subseteq V \\\nE' &\\subseteq E\n\\end{aligned}\n$$\n那么我们称 G' 为 G 的子图。")]),t._v(" "),n("p",[t._v("举个例子：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-051312.png",alt:"image-20250312131312298"}})]),t._v(" "),n("h2",{attrs:{id:"图的存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图的存储"}},[t._v("#")]),t._v(" 图的存储")]),t._v(" "),n("h3",{attrs:{id:"邻接矩阵"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵"}},[t._v("#")]),t._v(" 邻接矩阵")]),t._v(" "),n("p",[t._v("所谓邻接矩阵，本质上就是使用一个 "),n("strong",[t._v("二维数组")]),t._v(" 来存储图。举个例子，假设有如下的 "),n("strong",[t._v("有向图")]),t._v("：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-053737.png",alt:"image-20250312133737628"}}),t._v(" "),n("p",[t._v("那么使用一个二维数组存储的结构如下：\n$$\n\\left[\n\\begin{matrix}\n0 & 1 & 0 & 1 & 0\\\n0 & 0 & 0 & 0 & 1\\\n0 & 1 & 0 & 0 & 0\\\n0 & 0 & 1 & 0 & 0\\\n0 & 0 & 1 & 0 & 0\n\\end{matrix}\n\\right]\n$$\n每一行代表一个顶点，每一列也代表一个顶点。例如上面的图有 5 个顶点，那么这个二维数组就是 5 x 5 的二维数组。如果是 n 个顶点，那么这个二维数组就是 n x n。")]),t._v(" "),n("p",[t._v("1 表示顶点之间是有连接关系的。V1 顶点连接 V2，因此第一行第二列就是 1，V1 顶点连接 V4，因此第一行第四列就是 1.")]),t._v(" "),n("p",[t._v("接下来是无向图，如下：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-054803.png",alt:"image-20250312134803244"}}),t._v(" "),n("p",[t._v("使用邻接矩阵的表示法来表示的话，如下：\n$$\n\\left[\n\\begin{matrix}\n0 & 1 & 0 & 1 & 0\\\n1 & 0 & 1 & 0 & 1\\\n0 & 1 & 0 & 1 & 1\\\n1 & 0 & 1 & 0 & 0\\\n0 & 1 & 1 & 0 & 0\n\\end{matrix}\n\\right]\n$$\n因为无向路是没有方向的，因此 V1 顶点连接 V2 顶点的同时，V2 顶点也连接 V1 顶点。")]),t._v(" "),n("p",[n("strong",[t._v("带边权的图")])]),t._v(" "),n("p",[t._v("另外，我们知道图可以是带边权的，此时在二维数组中 "),n("strong",[t._v("存储的就是具体的边权值")]),t._v("，而非简单的记入 1。")]),t._v(" "),n("p",[t._v("下面是具体的例子。首先是带边权的有向图：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-055412.png",alt:"image-20250312135412244"}}),t._v(" "),n("p",[t._v("表示出来就是：\n$$\n\\left[\n\\begin{matrix}\n\\infty & 5 & \\infty & 4 & \\infty\\\n\\infty & \\infty & \\infty & \\infty & 4\\\n\\infty & 1 & \\infty & \\infty & \\infty\\\n\\infty & \\infty & 2 & \\infty & \\infty\\\n\\infty & \\infty & 2 & \\infty & \\infty\n\\end{matrix}\n\\right]\n$$\n注意，现在没有相连的两个顶点，不能用 0 来表示，因为 0 会存在歧义，被误解为边权值。JS 里面就可以使用 Infinity")]),t._v(" "),n("p",[t._v("下面是带边权的无向图示例：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-060033.png",alt:"image-20250312140032926"}}),t._v(" "),n("p",[t._v("表示出来就是：\n$$\n\\left[\n\\begin{matrix}\n\\infty & 5 & \\infty & 4 & \\infty\\\n5 & \\infty & 1 & \\infty & 4\\\n\\infty & 1 & \\infty & 2 & 2\\\n4 & \\infty & 2 & \\infty & \\infty\\\n\\infty & 4 & 2 & \\infty & \\infty\n\\end{matrix}\n\\right]\n$$\n使用邻接矩阵来存储图的优缺点如下：")]),t._v(" "),n("p",[n("strong",[t._v("优点")])]),t._v(" "),n("p",[t._v("（1）容易判断两个顶点是否有边，例如要判断 V1 和 V2 这两个顶点是否有边，只需要看二维数组 "),n("code",[t._v("arr[0][1]")]),t._v(" 和 "),n("code",[t._v("arr[1][0]")]),t._v(" 是否有值即可。")]),t._v(" "),n("p",[t._v("（2）容易计算顶点的度。度还可以分为 "),n("strong",[t._v("出度")]),t._v(" 和 "),n("strong",[t._v("入度")]),t._v("。V2 顶点的出度，指的是 V2 顶点指向其他边的数量，下图中 V2 顶点的出度就是 1. 入度指的是指向当前顶点的边的数量，V2 的入度就为 2.")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-053737.png",alt:"image-20250312133737628"}}),t._v(" "),n("p",[t._v("上图使用邻接矩阵表示出来：\n$$\n\\left[\n\\begin{matrix}\n0 & 1 & 0 & 1 & 0\\\n0 & 0 & 0 & 0 & 1\\\n0 & 1 & 0 & 0 & 0\\\n0 & 0 & 1 & 0 & 0\\\n0 & 0 & 1 & 0 & 0\n\\end{matrix}\n\\right]\n$$\n该顶点对应的行的 1 的数量就是该顶点 "),n("strong",[t._v("出度")]),t._v(" 的数量，该顶点对应的列的 1 的数量就是 "),n("strong",[t._v("入度")]),t._v(" 的数量。")]),t._v(" "),n("p",[n("strong",[t._v("缺点")])]),t._v(" "),n("p",[t._v("（1）统计 "),n("strong",[t._v("边的数量")]),t._v(" 的效率较低，需要去遍历二维数组，时间复杂度为 "),n("code",[t._v("O(n²)")])]),t._v(" "),n("p",[t._v("（2）空间复杂度高，因为是二维数组来存储，因此空间复杂度也是 "),n("code",[t._v("O(n²)")])]),t._v(" "),n("h3",{attrs:{id:"邻接表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#邻接表"}},[t._v("#")]),t._v(" 邻接表")]),t._v(" "),n("p",[t._v("例如下面的图：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-062302.png",alt:"image-20250312142302485"}}),t._v(" "),n("p",[t._v("上面的图虽然有 5 个顶点，但是仅仅有顶点 2 连接顶点 1，如果用上面我们介绍过的邻接矩阵的方式来存储的话，就是：\n$$\n\\left[\n\\begin{matrix}\n\\infty & \\infty & \\infty & \\infty & \\infty\\\n9 & \\infty & \\infty & \\infty & \\infty\\\n\\infty & \\infty & \\infty & \\infty & \\infty\\\n\\infty & \\infty & \\infty & \\infty & \\infty\\\n\\infty & \\infty & \\infty & \\infty & \\infty\n\\end{matrix}\n\\right]\n$$\n上面的二维数组，仅仅只存储了一个 9，其他空间都浪费掉了。因此这里可以考虑使用邻接表的方式来存储。")]),t._v(" "),n("p",[n("strong",[t._v("邻接表核心思想")])]),t._v(" "),n("p",[t._v("邻接表的核心思想是使用一个 "),n("strong",[t._v("一维数组")]),t._v(" 来存储所有的顶点，因此有多少个顶点，这个一维数组的长度就是多少。数组里面的每一项是一个 "),n("strong",[t._v("链表")]),t._v("，"),n("strong",[t._v("链表会存储和该顶点连接的所有其他顶点")]),t._v("。")]),t._v(" "),n("p",[t._v("我们还是来看一个具体的例子，假设还是下面的有向图：")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-27-044231.png",alt:"image-20250327124230602"}}),t._v(" "),n("p",[t._v("那么使用数组存储的结构如下：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-071230.png",alt:"image-20250312151229515"}}),t._v(" "),n("p",[t._v("数组的每一项，是一个链表。这里以 V1 顶点为例。V1 指向了 V2 和 V4，V2 和 V4 这两个顶点在数组中的下标分别为 1")]),t._v(" "),n("p",[t._v("和 3，因此整个链表如蓝色部分所示。")]),t._v(" "),n("blockquote",[n("p",[t._v("注意这里 V2 和 V4 并"),n("strong",[t._v("不存在具体的顺序")]),t._v("，因此在链表中的表现也可以是下标为 3 的顶点在前面，下标为 1 的顶点在后面。")])]),t._v(" "),n("p",[t._v("因此，上面的有向图使用邻接表来存储的话，完整的邻接表为：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-072442.png",alt:"image-20250312152442563"}}),t._v(" "),n("p",[t._v("搞清楚了有向图后，无向图基本也是相同的道理，仅仅是链表的长度会更长一些，因为会包含出度和入度。例如下面的无向图：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-054803.png",alt:"image-20250312134803244"}}),t._v(" "),n("p",[t._v("使用邻接表的方式来存储的话，完整的数组结构如下图：")]),t._v(" "),n("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2025-03-12-073104.png",alt:"image-20250312153104203"}})])}),[],!1,null,null,null);n.default=_.exports}}]);